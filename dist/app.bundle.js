!function(n){var t={};function e(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=n,e.c=t,e.d=function(n,t,o){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:o})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var r in n)e.d(o,r,function(t){return n[t]}.bind(null,r));return o},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s="./src/index.js")}({"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(module,exports){eval('const hypocritical = str => console.log(str);\nlet justWatchMe = "Just watch me";\n\n// no lexical this\nconst introLog = () =>\n\thypocritical(\n\t\t\'I am going to use console.log a lot to demonstrate how to debug without using console log\',\n\t);\n\n// lexical this\nfunction setBreakpointsOnThisFunction() {\n\tconst someValue = 4;\n\thypocritical(\n\t\t\'You are setting a breakpoint to stop the execution of this file at this particular line\',\n\t);\n\treturn "hello world"\n};\n\nfunction iHaveThisContext() {\n\tconst someLetter = "x";\n\tjustWatchMe = "I\\\'m watching you"\n\treturn function returnedFromIHaveContext() {\n\t\tconsole.log(someLetter)\n\t}\n}\n\nconst partiallyExecuted = iHaveThisContext();\n\nconst simplePromiseExample = num =>\n  new Promise((res, rej) => {\n    if (num !== 5) {\n      rej(new Error(\'Rejected: ! Not equal to 5\'));\n    }\n    setTimeout(() => res(10), 2000);\n  });\n\nconst storeResultsAsGlobalVariable = () => 10;\n\nconst storeAsGlobalVariableAndEagerlyEvaluateResults = () => {\n\tconst myArray = [1,2,3,4,5,6];\n\tjustWatchMe = "I\\\'m still watching you"\n\treturn myArray\n}\n\nconst showMeACallStackBecauseOfError = () => {\n\tconsole.log("Error is coming");\n\tdebuggerClassInstance.heresAnError();\n}\n\nclass debuggerClass {\n\tconstructor(){\n\t\tthis.someValue = 4;\n\t\tthis.someString = "debugger demo"\n\t}\n\n\thypocritical(){\n\t\tconsole.log(this.someValue, this.someString);\n\t}\n\n\tsetBreakpointsOnThisFunction() {\n\t\tconst someArray = [1,2,3,4,5,6,7];\n\t\tthis.hypocritical();\n\t\tsomeArray.map(\n\t\t\tnum => num + 1\n\t\t)\n\t\treturn "hello world"\n\t};\n\theresAnError(){\n\t\tthrow new Error("oh oh")\n\t}\n\tshouldError(){\n\t\tconsole.log(IdontExist)\n\t}\n}\n\nconst debuggerClassInstance = new debuggerClass();\n\t\nintroLog();\nsetBreakpointsOnThisFunction();\npartiallyExecuted();\n\ndebuggerClassInstance.hypocritical();\n// debuggerClassInstance.heresAnError();\n// debuggerClassInstance.shouldError();\ndebuggerClassInstance.setBreakpointsOnThisFunction();\n\nstoreResultsAsGlobalVariable();\nstoreAsGlobalVariableAndEagerlyEvaluateResults();\n// showMeACallStackBecauseOfError();\n\nsimplePromiseExample(5)\n  .then(val => console.log(\'Value: \', val))\n  .catch(err => console.error(\'Error: \', err.message));\n\n\n//# sourceURL=webpack:///./src/index.js?')}});